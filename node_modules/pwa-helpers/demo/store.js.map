{"version":3,"file":"store.js","sourceRoot":"","sources":["../src/demo/store.ts"],"names":[],"mappings":"AAAA;;;;;;;;EAQE;AASF,OAAO,EACL,eAAe,EACf,OAAO,EACP,WAAW,EAEZ,MAAM,OAAO,CAAC;AACf,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAA;AAiBjE,6BAA6B;AAC7B,OAAO,OAAyB,MAAM,uBAAuB,CAAC;AAE9D,wDAAwD;AACxD,mFAAmF;AACnF,MAAM,UAAU,GAAG,MAAM,CAAC,oCAAoC,IAAI,OAAO,CAAC;AAE1E,0EAA0E;AAC1E,yDAAyD;AACzD,MAAM,CAAC,MAAM,KAAK,GAAG,WAAW,CAC9B,KAAK,CAAC,EAAE,CAAC,KAAyC,EAClD,UAAU,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,CACjD,CAAC;AAEF,KAAK,CAAC,WAAW,CAAC;IAChB,OAAO;CACR,CAAC,CAAC","sourcesContent":["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\ndeclare global {\n  interface Window {\n    process?: Object;\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nimport {\n  combineReducers,\n  compose,\n  createStore,\n  Reducer\n} from 'redux';\nimport { lazyReducerEnhancer } from '../lazy-reducer-enhancer.js'\nimport { CounterAction } from './actions/counter.js';\nimport { LazyState } from './reducers/lazy.js';\n\n// static states\nexport interface AppStateCounter {\n  counter: CounterState\n}\n\n// lazy states\nexport interface AppStateLazy {\n  lazy: LazyState\n}\n\n// overall state extends static states and partials lazy states\nexport interface AppState extends AppStateCounter, Partial<AppStateLazy> {}\n\n// Initially loaded reducers.\nimport counter, { CounterState } from './reducers/counter.js';\n\n// Sets up a Chrome extension for time travel debugging.\n// See https://github.com/zalmoxisus/redux-devtools-extension for more information.\nconst devCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Initializes the Redux store with a lazyReducerEnhancer (so that you can\n// lazily add reducers after the store has been created).\nexport const store = createStore(\n  state => state as Reducer<AppState, CounterAction>,\n  devCompose(lazyReducerEnhancer(combineReducers))\n);\n\nstore.addReducers({\n  counter\n});\n"]}