{"version":3,"file":"redux-example.js","sourceRoot":"","sources":["../../src/demo/components/redux-example.ts"],"names":[],"mappings":"AAAA;;;;;;;;EAQE;AAEF,OAAO,sBAAsB,CAAC;AAC9B,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAY,MAAM,aAAa,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAG7D;;;;;EAKE;AAEF,wEAAwE;AACxE,6CAA6C;AAC7C,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AAClD,QAAQ,CAAC,SAAS,GAAG;;;;;;;;;;;CAWpB,CAAA;AAED,MAAM,YAAa,SAAQ,OAAO,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;IAKpD;QACE,KAAK,EAAE,CAAC;QAER,sBAAsB;QACtB,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAE,CAAC;QACpD,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAEpE,0DAA0D;QAC1D,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAoB,CAAC;QAC/E,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,YAAY,CAAE,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,WAAW,CAAE,CAAC;QAC1D,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,cAAc,CAAC,aAAa,CAAE,CAAC;QAE9D,gEAAgE;QAChE,6BAA6B;QAC7B,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAEhF,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAE,CAAC,gBAAgB,CAAC,OAAO,EACxD,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,YAAY,CAAC,KAAe;QAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACxD,iBAAiB;QACjB,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACpD,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;IAC3F,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC5C,KAAK,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;AAED,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC","sourcesContent":["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport './counter-element.js';\nimport { connect } from '../../connect-mixin.js';\nimport { store, AppState } from '../store.js';\nimport { increment, decrement } from '../actions/counter.js';\n\n\n/*\nThis is an element that is connected to the Redux store, which contains\nthe immutable state for the clicks/value of the counter element.\nThis element is also responsible for updating the counter element's internal\nstate.\n*/\n\n// For simplicity, we're not using any styles in this element so that we\n// don't have to set up a Shady CSS polyfill.\nlet template = document.createElement('template');\ntemplate.innerHTML = `\n<div>\n  Inside &lt;redux-example&gt;. The store state is:\n  <ul>\n    <li><code>clicks = <span id=\"clicksSpan\"></span></code></li>\n    <li><code>value = <span id=\"valueSpan\"></span></code></li>\n    <li><code>didLoad = <span id=\"didLoadSpan\"></span></code></li>\n  </ul>\n  <counter-element></counter-element>\n  <button>Load lazy reducer</button>\n</div>\n`\n\nclass ReduxExample extends connect(store)(HTMLElement) {\n  private _counter: CounterElement\n  private _clicksSpan: HTMLElement\n  private _valueSpan: HTMLElement\n  private _didLoadSpan: HTMLElement\n  constructor() {\n    super();\n\n    // Stamp the template.\n    let shadowRoot = this.attachShadow({mode: 'open'})!;\n    shadowRoot.appendChild(document.importNode(template.content, true));\n\n    // Cache some elements so that you don't qsa all the time.\n    this._counter = shadowRoot.querySelector('counter-element')! as CounterElement;\n    this._clicksSpan = shadowRoot.getElementById('clicksSpan')!;\n    this._valueSpan = shadowRoot.getElementById('valueSpan')!;\n    this._didLoadSpan = shadowRoot.getElementById('didLoadSpan')!;\n\n    // Every time the display of the counter updates, we should save\n    // these values in the store.\n    this.addEventListener('counter-incremented', () => store.dispatch(increment()));\n    this.addEventListener('counter-decremented', () => store.dispatch(decrement()));\n\n    shadowRoot.querySelector('button')!.addEventListener('click',\n        () => this._loadReducer());\n  }\n\n  stateChanged(state: AppState) {\n    const numClicks = this._counter.clicks = state.counter.clicks;\n    const value = this._counter.value = state.counter.value;\n    // Update the UI.\n    this._clicksSpan.textContent = numClicks.toString();\n    this._valueSpan.textContent = value.toString();\n    this._didLoadSpan.textContent = state.lazy ? state.lazy.didLoad.toString() : 'undefined';\n  }\n\n  private _loadReducer() {\n    import('../reducers/lazy.js').then((module) => {\n      store.addReducers({ lazy: module.default });\n    });\n  }\n\n}\n\nwindow.customElements.define('redux-example', ReduxExample);\n"]}