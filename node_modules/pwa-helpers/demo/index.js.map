{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/demo/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;EAQE;AAEF,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,eAAe,CAAC;AACtD,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAE,CAAC;AAC1D,MAAM,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAE,CAAC;AACpE,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAE,CAAC;AACtD,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAE,CAAC;AAC5D,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAE,CAAC;AAE1D,CAAC,KAAK;IACJ,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CACxB,GAAG,EAAE,GAAE,CAAC,EACR,CAAC,CAAC,EAAE,EAAE,GAAG,eAAe,CAAC,WAAW,GAAG,CAAC,CAAA,CAAC,CAAC,CACzC,CAAC;AACN,CAAC,CAAC,EAAE,CAAC;AAEL,aAAa,CAAC,CAAC,QAAQ,EAAE,EAAE;IACzB,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAA;IAC9B,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;IAE5B,IAAI,IAAI,KAAK,mBAAmB,EAAE;QAChC,cAAc,CAAC;YACX,KAAK,EAAE,gCAAgC;YACvC,WAAW,EAAE,4CAA4C;YACzD,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,EAAE;SACZ,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AACH,qBAAqB,CAAC,CAAC,OAAO,EAAE,EAAE;IAChC,WAAW,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC;AAC5D,CAAC,CAAC,CAAC;AACH,wBAAwB,CAAC,oBAAoB,EAAE,CAAC,OAAO,EAAE,EAAE;IACzD,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;AACvD,CAAC,CAAC,CAAC","sourcesContent":["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { installRouter } from '../router.js';\nimport { installOfflineWatcher } from '../network.js';\nimport { installMediaQueryWatcher } from '../media-query.js';\nimport { updateMetadata } from '../metadata.js';\nimport { axeReport } from '../axe-report.js';\n\nconst testButton = document.getElementById('testButton')!;\nconst axeReportOutput = document.getElementById('axeReportOutput')!;\nconst pageSpan = document.getElementById('pageSpan')!;\nconst offlineSpan = document.getElementById('offlineSpan')!;\nconst screenSpan = document.getElementById('screenSpan')!;\n\n(async function() {\n  axeReport(testButton).then(\n    () => {},\n    (e) => { axeReportOutput.textContent = e }\n    );\n})();\n\ninstallRouter((location) => {\n  const page = location.pathname\n  pageSpan.textContent = page;\n\n  if (page === '/demo/update-meta') {\n    updateMetadata({\n        title: '🎁🎉 PWA helpers for all! 🎉🎁',\n        description: 'Demo of the utility methods in PWA helpers',\n        url: '',\n        image: ''\n    });\n  }\n});\ninstallOfflineWatcher((offline) => {\n  offlineSpan.textContent = offline ? ' offline' : 'online';\n});\ninstallMediaQueryWatcher(`(min-width: 600px)`, (matches) => {\n  screenSpan.textContent = matches ? 'wide' : 'narrow';\n});"]}