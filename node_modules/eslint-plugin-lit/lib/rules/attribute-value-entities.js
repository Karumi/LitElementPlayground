"use strict";
/**
 * @fileoverview Disallows unencoded HTML entities in attribute values
 * @author James Garbutt <https://github.com/43081j>
 */
const template_analyzer_1 = require("../template-analyzer");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows unencoded HTML entities in attribute values',
            category: 'Best Practices',
            recommended: true,
            url: 'https://github.com/43081j/eslint-plugin-lit/blob/master/docs/rules/attribute-value-entities.md'
        },
        messages: {
            unencoded: 'Attribute values may not contain unencoded HTML ' +
                'entities, e.g. use `&gt;` instead of `>`'
        }
    },
    create(context) {
        // variables should be defined here
        const disallowedPattern = /([<>"]|&(?!(#\d+|[a-z]+);))/;
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            TaggedTemplateExpression: (node) => {
                if (node.type === 'TaggedTemplateExpression' &&
                    node.tag.type === 'Identifier' &&
                    node.tag.name === 'html') {
                    const analyzer = template_analyzer_1.TemplateAnalyzer.create(node);
                    analyzer.traverse({
                        enterElement: (element) => {
                            // eslint-disable-next-line guard-for-in
                            for (const attr in element.attribs) {
                                const loc = analyzer.getLocationForAttribute(element, attr);
                                const rawValue = analyzer.getRawAttributeValue(element, attr);
                                if (!loc || !rawValue) {
                                    continue;
                                }
                                if (disallowedPattern.test(rawValue)) {
                                    context.report({
                                        loc: loc,
                                        messageId: 'unencoded'
                                    });
                                }
                            }
                        }
                    });
                }
            }
        };
    }
};
module.exports = rule;
